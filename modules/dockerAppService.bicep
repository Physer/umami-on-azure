import { appSetting } from '../types/appsetting.bicep'

param location string = resourceGroup().location

param appServiceName string
param appServicePlanId string
param virtualNetworkName string
param subnetName string
param imageName string
param imageTag string
param appSettings appSetting[]
@allowed([
  'Enabled'
  'Disabled'
])
param publicNetworkAccess string

resource dockerAppService 'Microsoft.Web/sites@2024-11-01' = {
  name: appServiceName
  location: location
  identity: {
    type: 'SystemAssigned'
  }
  properties: {
    serverFarmId: appServicePlanId
    autoGeneratedDomainNameLabelScope: 'SubscriptionReuse'
    httpsOnly: true
    publicNetworkAccess: publicNetworkAccess
    outboundVnetRouting: {
      allTraffic: false
      applicationTraffic: true
      contentShareTraffic: false
      imagePullTraffic: false
      backupRestoreTraffic: false
    }
    reserved: true
    siteConfig: {
      appSettings: appSettings
      alwaysOn: true
      http20Enabled: true
      linuxFxVersion: 'DOCKER|${imageName}:${imageTag}'
      publicNetworkAccess: publicNetworkAccess
      vnetName: virtualNetworkName
    }
    virtualNetworkSubnetId: resourceId('Microsoft.Network/virtualNetworks/subnets', virtualNetworkName, subnetName)
  }
  kind: 'app,linux,container'
}

output resourceId string = dockerAppService.id
output principalId string = dockerAppService.identity.principalId
